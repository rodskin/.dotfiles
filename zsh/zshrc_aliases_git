alias mygit="git config user.name \"Rodskin\" && git config user.email \"rod.gilles@gmail.com\""

alias git="git -c color.ui=auto"
alias gitst="git status --short"
alias gitstu="git status --short -uno"
alias gitfa="git fetch --all"
alias gitpure="git pull --rebase=preserve"
alias gitmerge="git merge --no-ff"
function gitmergerebased() {
    GIT_CURRENT_BRANCH="$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)"
    if [ "$GIT_CURRENT_BRANCH" == "" ]; then
        return 1
    fi
    if [ "$1" == "" ]; then
        echo
        echo -e "\033${TERM_COLOR_LIGHT_RED}Usage: $FUNCNAME <feature_branch>\033${TERM_COLOR_NORMAL}"
        echo
            cat <<EOF
Cleanly merge <feature_branch> in "$GIT_CURRENT_BRANCH" (eg. "master") by rebasing first
EOF
        return 2
    fi
    MERGE_FAILED=0
    git merge --ff-only $1 || MERGE_FAILED=1
    if [ "$MERGE_FAILED" == "1" ]; then
        echo
        echo -e "\033${TERM_COLOR_LIGHT_RED}You should try a rebase first:\033${TERM_COLOR_NORMAL}"
        cat <<EOF
# rebase
git checkout $1 && git rebase $GIT_CURRENT_BRANCH
# or interactive rebase if you want something cleaner:
git checkout $1 && git rebase -i $GIT_CURRENT_BRANCH
EOF
        echo
        echo "Solve conflicts (if any, wash-and-rinse till no conflicts remains) with these:"
        cat <<EOF
# wash...
gitmergetool
# ... and rinse
git rebase --continue
EOF
        echo
        echo -e "\033${TERM_COLOR_LIGHT_GREEN}Then you will be allowed to merge and delete merged branch:\033${TERM_COLOR_NORMAL}"
        cat <<EOF
git checkout $GIT_CURRENT_BRANCH && $FUNCNAME $1
git branch -d $1
EOF
    else
        echo
        cat <<EOF
Now delete merged branch:
git branch -d $1
EOF
    fi
}
GITLG_OPTIONS="--graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ad)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' "
alias gitunpushed="GIT_CURRENT_BRANCH=\"\$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)\" && git log origin/\$GIT_CURRENT_BRANCH..HEAD $GITLG_OPTIONS"
alias gitunpushedupstream="GIT_CURRENT_BRANCH=\"\$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)\" && git log upstream/\$GIT_CURRENT_BRANCH..HEAD $GITLG_OPTIONS"
alias gitincoming="GIT_CURRENT_BRANCH=\"\$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)\" && git log ..origin/\$GIT_CURRENT_BRANCH $GITLG_OPTIONS"
alias gitincomingupstream="GIT_CURRENT_BRANCH=\"\$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)\" && git log ..upstream/\$GIT_CURRENT_BRANCH $GITLG_OPTIONS"
alias gitincomingfiles="gitincoming --name-status --diff-filter=MDACU | grep '^[[:space:]|\\/]*[MDARCU][[:space:]]*' | sed 's/^[[:space:]|\\/]*[MDARCU][[:space:]]*//g' | sort | uniq"
alias gitincomingupstreamfiles="gitincoming --name-status --diff-filter=MDACU | grep '^[[:space:]|\\/]*[MDARCU][[:space:]]*' | sed 's/^[[:space:]|\\/]*[MDARCU][[:space:]]*//g' | sort | uniq"
alias gitstfiles="gitst | grep '^[[:space:]|\\/]*[MDARCU?]*[[:space:]]*' | sed 's/^[[:space:]|\\/]*[MDARCU?]*[[:space:]]*//g' | sort | uniq"
alias gitstashfiles="git stash list --name-status | grep '^[[:space:]]*[MDARCU?]\?[[:space:]]' | sed 's/^[[:space:]*|\\/]*[MDARCU?]*[[:space:]]*//g' | sort | uniq"
alias gitincomingconflicts="comm -12 <(gitstfiles) <(gitincomingfiles)"
alias gitincomingupstreamconflicts="comm -12 <(gitstfiles) <(gitincomingupstreamfiles)"
alias gitstashconflicts="comm -12 <(gitstfiles) <(gitstashfiles)"
alias gitlg="git log --name-status $GITLG_OPTIONS"
alias gitlga="gitlg --all"
if [[ "$SBASH_SUFFIX" != "" ]];
then
    SUFFIX="$SBASH_SUFFIX"
    if [[ "$GROOT_AS_USER" != "" ]]; then
        SUFFIX="$SBASH_SUFFIX.$GROOT_AS_USER"
    fi
    alias vimdiff="nvim -d"
    export EDITOR="vim -u /tmp/.vimrc_$SUFFIX" # set default editor to vim if not already set
    function man() { sought=$*; /usr/bin/man $sought | col -b | vim -u /tmp/.vimrc_$SUFFIX -R -c "set nonumber" -c "set syntax=man" -c "set nolist" -c "match" -; }
    alias_gitdifftool="git -c diff.tool=nvim -c difftool.prompt=true -c difftool.nvim.cmd='nvim -d -u /tmp/.vimrc_$SUFFIX \$LOCAL \$REMOTE' difftool"
    alias gitmergetool="git -c mergetool.keepBackup=false -c merge.tool=diffconflicts -c mergetool.diffconflicts.cmd='/usr/bin/env bash /tmp/.diffconflicts_$SUFFIX \"vim -u /tmp/.vimrc_$SUFFIX\" \$BASE \$LOCAL \$REMOTE \$MERGED && echo \"<ctrl+c> to abort, <enter> to continue...\" && read' mergetool"
else
    export EDITOR="vim" # set default editor to vim if not already set
    function man() { sought=$*; /usr/bin/man $sought | col -b | vim -R -c "set nonumber" -c "set syntax=man" -c "set nolist" -c "match" -; }
    # use "read" to wait for user input between each diff so we can abort
    alias_gitdifftool="git -c diff.tool=nvim -c difftool.prompt=true -c difftool.nvim.cmd='nvim -d \$LOCAL \$REMOTE' difftool"
    alias gitmergetool="git -c mergetool.keepBackup=false -c merge.tool=diffconflicts -c mergetool.diffconflicts.cmd='/usr/bin/env bash ~/bin/diffconflicts vim \$BASE \$LOCAL \$REMOTE \$MERGED && echo \"<ctrl+c> to abort, <enter> to continue...\" && read' mergetool"
fi
alias gitdifftool="$alias_gitdifftool"
function gitshowtool() {
    REVISION='HEAD';
    if [[ "$1" != "" ]]; then REVISION="$1"; fi
    shift;
    git -c diff.tool=nvim -c difftool.prompt=true difftool $REVISION~ $REVISION $@
}
function gitdiffwith() {
    GIT_CURRENT_BRANCH="$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)"
    GIT_OTHER_BRANCH="$1"
    shift # shift so that we can inject more parameters by using the $@ parameter
    git log $GIT_OTHER_BRANCH..$GIT_CURRENT_BRANCH \
        --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ad)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' $@
}
